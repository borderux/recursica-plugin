import { autoGeneratedFile } from '../utils/autoGeneratedFile';
import { ExportingResult, RecursicaConfigIcons } from '../types';

export interface GenerateIconsOutput {
  exportedIcons: ExportingResult[];
  iconExports: ExportingResult;
  iconResourceMap: ExportingResult;
}

export function generateIcons(
  icons: Record<string, string>,
  srcPath: string,
  config: RecursicaConfigIcons | undefined
): GenerateIconsOutput {
  let iconsPath: string;
  if (!config?.output) {
    iconsPath = srcPath + '/components' + '/Icons';
  } else {
    iconsPath = srcPath + '/' + config.output;
  }
  const svgPath = iconsPath + '/Svg';

  const exportedIcons: ExportingResult[] = [];
  // Generate svg files
  for (const [rawIconName, iconPath] of Object.entries(icons)) {
    const [iconName, variant] = rawIconName.split('[');
    let cleanIconName = iconName.replaceAll('-', '_');
    // check if the iconName is in the names array, if not, skip
    if (!config?.names?.includes(cleanIconName)) {
      continue;
    }
    // detect if the iconName starts with a number, if so, add an underscore to the beginning
    if (cleanIconName.match(/^\d/)) {
      cleanIconName = `_${cleanIconName}`;
    }
    const cleanVariant = variant.replace(']', '').replace('Style=', '');
    const codedVariant = cleanVariant.replaceAll(' ', '_');
    // check if the codedVariant is in the variants array, if not, skip
    if (!config?.variants?.includes(codedVariant)) {
      continue;
    }
    const finalIconName = `${cleanIconName}_${codedVariant}`;
    exportedIcons.push({
      content: iconPath.replaceAll('fill="black"', '').replaceAll('fill="none"', ''),
      path: `${svgPath}/${finalIconName}.svg`,
      filename: `${finalIconName}`,
    });
  }
  // Generate icon exports file
  const exportsPath = iconsPath + '/icon_exports.ts';
  let exportsContent = `${autoGeneratedFile()}
/// <reference types="vite-plugin-svgr/client" />\n`;
  for (const icon of exportedIcons) {
    exportsContent += `import ${icon.filename} from './Svg/${icon.filename}.svg?react';\n`;
    exportsContent += `export { ${icon.filename} };\n`;
  }

  // Generate icon map file
  const mapPath = iconsPath + '/icon_resource_map.ts';
  let mapContent = `${autoGeneratedFile()}\nimport * as IconExports from './icon_exports';\n\n`;
  mapContent += 'export const IconResourceMap = {';
  mapContent += exportedIcons
    .map((icon) => `\n\t'${icon.filename}': IconExports.${icon.filename},`)
    .join('');
  mapContent += '\n};\n';

  return {
    exportedIcons,
    iconExports: {
      content: exportsContent,
      path: exportsPath,
      filename: 'icon_exports.ts',
    },
    iconResourceMap: {
      content: mapContent,
      path: mapPath,
      filename: 'icon_resource_map.ts',
    },
  };
}

import fs from 'fs';
import path from 'path';
import { autoGeneratedFile } from '../utils/autoGeneratedFile';
import { RecursicaConfigIcons } from '../types';

export function generateIcons(
  icons: Record<string, string>,
  srcPath: string,
  config: RecursicaConfigIcons | undefined
) {
  let iconsPath: string;
  if (!config?.output) {
    iconsPath = path.join(srcPath, 'components', 'Icons');
  } else {
    iconsPath = path.join(srcPath, config.output);
  }
  const svgPath = path.join(iconsPath, 'Svg');

  if (!fs.existsSync(iconsPath)) {
    fs.mkdirSync(iconsPath, { recursive: true });
  }
  if (!fs.existsSync(svgPath)) {
    fs.mkdirSync(svgPath, { recursive: true });
  } else {
    fs.rmSync(svgPath, { recursive: true, force: true });
    fs.mkdirSync(svgPath, { recursive: true });
  }

  const iconNames: string[] = [];
  // Generate svg files
  for (const [rawIconName, iconPath] of Object.entries(icons)) {
    const [iconName, variant] = rawIconName.split('[');
    let cleanIconName = iconName.replaceAll('-', '_');
    // check if the iconName is in the names array, if not, skip
    if (!config?.names?.includes(cleanIconName)) {
      continue;
    }
    // detect if the iconName starts with a number, if so, add an underscore to the beginning
    if (cleanIconName.match(/^\d/)) {
      cleanIconName = `_${cleanIconName}`;
    }
    const cleanVariant = variant.replace(']', '').replace('Style=', '');
    const codedVariant = cleanVariant.replaceAll(' ', '_');
    // check if the codedVariant is in the variants array, if not, skip
    if (!config?.variants?.includes(codedVariant)) {
      continue;
    }
    const finalIconName = `${cleanIconName}_${codedVariant}`;
    iconNames.push(finalIconName);
    fs.writeFileSync(
      path.join(svgPath, `${finalIconName}.svg`),
      iconPath.replaceAll('fill="black"', '').replaceAll('fill="none"', '')
    );
  }
  // Generate icon exports file
  const exportsPath = path.join(iconsPath, 'icon_exports.ts');
  let exportsContent = `${autoGeneratedFile()}
/// <reference types="vite-plugin-svgr/client" />\n`;
  for (const iconName of iconNames) {
    exportsContent += `import ${iconName} from './Svg/${iconName}.svg?react';\n`;
    exportsContent += `export { ${iconName} };\n`;
  }
  fs.writeFileSync(exportsPath, exportsContent);

  // Generate icon map file
  const mapPath = path.join(iconsPath, 'icon_resource_map.ts');
  let mapContent = `${autoGeneratedFile()}\nimport * as IconExports from './icon_exports';\n\n`;
  mapContent += 'export const IconResourceMap = {';
  mapContent += iconNames.map((iconName) => `\n\t'${iconName}': IconExports.${iconName},`).join('');
  mapContent += '\n};\n';
  fs.writeFileSync(mapPath, mapContent);

  return iconsPath;
}
